{"version":3,"sources":["components/ControlPanel/ControlPanel.module.css","components/Chart/Chart.module.css","components/ControlPanel/ControlPanel.jsx","components/Chart/Chart.jsx","helpers.js","components/Drawer/Drawer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","ControlPanel","props","className","s","controlBlock","placeholder","value","command","onChange","e","handleSetCommand","onClick","handelAddCommand","ControlPanelContainer","useState","setCommand","currentTarget","Chart","chartBlock","arrChart","map","row","idRow","key","col","idCol","isNumber","Number","isNaN","line","x1","y1","x2","y2","changedArrChart","item","Object","assign","i","traverse","x","y","current","visited","length","has","push","add","fill","colour","fields","Set","j","field","findField","includes","k","Drawer","chartReady","setChartReady","setArrChart","preparedCommand","split","isValid","checkCommand","rectangle","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6b628b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlBlock\":\"ControlPanel_controlBlock__fPHkl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chartBlock\":\"Chart_chartBlock__K8XNN\"};","import React, {useState} from 'react';\r\nimport s from './ControlPanel.module.css';\r\n\r\nconst ControlPanelContainer = (props) => {\r\n    const [command, setCommand] = useState('');\r\n    const handleSetCommand = (e) => {\r\n        setCommand(e.currentTarget.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ControlPanel command={command}\r\n                          handleSetCommand={handleSetCommand}\r\n                          handelAddCommand={props.handelAddCommand}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst ControlPanel = (props) => {\r\n    return (\r\n        <div className={s.controlBlock}>\r\n            <input placeholder={'enter the command'}\r\n                   value={props.command}\r\n                   onChange={(e) => props.handleSetCommand(e)}/>\r\n            <button onClick={(e) => props.handelAddCommand(props.command)}>perform command</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ControlPanelContainer;\r\n","import React from 'react';\r\nimport s from './Chart.module.css';\r\n\r\nconst Chart = (props) => {\r\n    return (\r\n        <div className={s.chartBlock}>\r\n            <table>\r\n                {props.arrChart.map((row, idRow) => (\r\n                    <tbody key={idRow}>\r\n                    <tr key={idRow}>\r\n                        {row.map((col, idCol) => <td key={`${idRow}_${idCol}`}>{col}</td>)}\r\n                    </tr>\r\n                    </tbody>\r\n                ))}\r\n            </table>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Chart;\r\n","export const isNumber = (value) => (value instanceof Number || typeof value === 'number') && !isNaN(value);\r\n\r\nexport const checkCommand = (preparedCommand, arrChart) => {\r\n    if (preparedCommand.length === 3\r\n        && preparedCommand[0] === 'C'\r\n        && isNumber(+preparedCommand[1])\r\n        && isNumber(+preparedCommand[2])) {\r\n        return true;\r\n    }\r\n    if (preparedCommand.length === 5\r\n        && (preparedCommand[0] === 'L'\r\n            || preparedCommand[0] === 'R')\r\n        && isNumber(+preparedCommand[1])\r\n        && isNumber(+preparedCommand[2])\r\n        && isNumber(+preparedCommand[3])\r\n        && isNumber(+preparedCommand[4])) {\r\n        return true;\r\n    }\r\n    if (preparedCommand.length === 4\r\n        && preparedCommand[0] === 'B'\r\n        && isNumber(+preparedCommand[1])\r\n        && isNumber(+preparedCommand[2])\r\n        && typeof preparedCommand[3] === 'string') {\r\n        return true;\r\n    }\r\n    return false;\r\n};","import React, {useState} from 'react';\r\nimport ControlPanelContainer from \"../ControlPanel/ControlPanel\";\r\nimport Chart from \"../Chart/Chart\";\r\nimport {checkCommand} from \"../../helpers\";\r\n\r\nconst field = (props) => {\r\n    const {x, y} = props;\r\n    const arrChart = [];\r\n    for (let i = 0; i < y; i++) {\r\n        arrChart[i] = [];\r\n        for (let j = 0; j < x; j++) {\r\n            arrChart[i][j] = '';\r\n        }\r\n    }\r\n    return arrChart;\r\n};\r\n\r\nconst line = (props) => {\r\n    const {x1, y1, x2, y2, arrChart} = props;\r\n    let changedArrChart = arrChart.map(item => Object.assign([], item));\r\n    changedArrChart[y1 - 1][x1 - 1] = 'X';\r\n    changedArrChart[y2 - 1][x2 - 1] = 'X';\r\n    if (x1 === x2) {\r\n        for (let i = y1 - 1; i < y2 - 1; i++) {\r\n            changedArrChart[i][x1 - 1] = 'X';\r\n        }\r\n    } else {\r\n        for (let i = x1 - 1; i < x2 - 1; i++) {\r\n            changedArrChart[y1 - 1][i] = 'X';\r\n        }\r\n    }\r\n    return changedArrChart;\r\n};\r\n\r\nconst rectangle = (props) => {\r\n    const {x1, y1, x2, y2, arrChart} = props;\r\n    let changedArrChart = arrChart.map(item => Object.assign([], item));\r\n    changedArrChart = line({\r\n        x1: x1, y1: y1,\r\n        x2: x2, y2: y1, arrChart: changedArrChart\r\n    });\r\n    changedArrChart = line({\r\n        x1: x1, y1: y2,\r\n        x2: x2, y2: y2, arrChart: changedArrChart\r\n    });\r\n    changedArrChart = line({\r\n        x1: x1, y1: y1,\r\n        x2: x1, y2: y2, arrChart: changedArrChart\r\n    });\r\n    changedArrChart = line({\r\n        x1: x2, y1: y1,\r\n        x2: x2, y2: y2, arrChart: changedArrChart\r\n    });\r\n    return changedArrChart;\r\n};\r\n\r\nconst findField = (arrChart) => {\r\n    const fields = [], visited = new Set;\r\n    for (let i = 0; i < arrChart.length; i++) {\r\n        for (let j = 0; j < arrChart[i].length; j++) {\r\n            if (visited.has(i + '_' + j)) continue;\r\n            let field = traverse(i, j, [], visited, arrChart);\r\n            if (field) {\r\n                fields.push(field);\r\n            }\r\n        }\r\n    }\r\n    return fields;\r\n};\r\n\r\nconst traverse = (x, y, current = [], visited, arrChart) => {\r\n    if (x < 0 || y < 0 || x > arrChart.length - 1 || y > arrChart[0].length - 1) return;\r\n    if (arrChart[x][y] === 'X' || visited.has(x + '_' + y)) return;\r\n    current.push(x + '_' + y);\r\n    visited.add(x + '_' + y);\r\n    traverse(x, y + 1, current, visited, arrChart);\r\n    traverse(x, y - 1, current, visited, arrChart);\r\n    traverse(x - 1, y, current, visited, arrChart);\r\n    traverse(x + 1, y, current, visited, arrChart);\r\n    return current;\r\n};\r\n\r\nconst fill = (props) => {\r\n    const {x, y, colour, arrChart} = props;\r\n    const changedArrChart = arrChart.map(item => Object.assign([], item));\r\n    const fields = findField(changedArrChart);\r\n    for (let i = 0; i < fields.length; i++) {\r\n        const fillField = fields[i].includes(`${y - 1}_${x - 1}`);\r\n        if (fillField) {\r\n            for (let j = 0; j < changedArrChart.length; j++) {\r\n                for (let k = 0; k < changedArrChart[j].length; k++) {\r\n                    if (fields[i].includes(`${j}_${k}`)) {\r\n                        changedArrChart[j][k] = colour;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return changedArrChart;\r\n};\r\n\r\nconst Drawer = (props) => {\r\n    const [chartReady, setChartReady] = useState(false);\r\n    const [arrChart, setArrChart] = useState([]);\r\n\r\n    const handelAddCommand = (command) => {\r\n        const preparedCommand = command.split(' ');\r\n        const isValid = checkCommand(preparedCommand, arrChart);\r\n\r\n        if (isValid && preparedCommand[0] === 'C') {\r\n            setChartReady(true);\r\n            setArrChart(field({x: preparedCommand[1], y: preparedCommand[2]}));\r\n        } else if (isValid && chartReady && preparedCommand[0] === 'L') {\r\n            setArrChart(line({\r\n                x1: preparedCommand[1], y1: preparedCommand[2],\r\n                x2: preparedCommand[3], y2: preparedCommand[4], arrChart\r\n            }));\r\n        } else if (isValid && chartReady && preparedCommand[0] === 'R') {\r\n            setArrChart(rectangle({\r\n                x1: preparedCommand[1], y1: preparedCommand[2],\r\n                x2: preparedCommand[3], y2: preparedCommand[4], arrChart\r\n            }));\r\n        } else if (isValid && chartReady && preparedCommand[0] === 'B') {\r\n            setArrChart(fill({x: preparedCommand[1], y: preparedCommand[2], colour: preparedCommand[3], arrChart}));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <ControlPanelContainer handelAddCommand={handelAddCommand}/>\r\n            {chartReady && <Chart arrChart={arrChart}/>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Drawer;\r\n","import React from 'react';\nimport './App.css';\nimport Drawer from \"./components/Drawer/Drawer\";\n\nconst App = (props) => {\n    return (\n        <div className=\"App\">\n            <Drawer/>\n        </div>\n    )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}